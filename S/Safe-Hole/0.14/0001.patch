From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas R <nicolas@atoomic.org>
Date: Tue, 25 Aug 2020 14:01:41 -0600
Subject: [PATCH] add use v5

---
 lib/Safe/Hole.pm | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/lib/Safe/Hole.pm b/lib/Safe/Hole.pm
index 73dc43a..e294db5 100644
--- a/lib/Safe/Hole.pm
+++ b/lib/Safe/Hole.pm
@@ -1,7 +1,7 @@
 # Safe::Hole - make a hole to the original main compartment in the Safe compartment
 # Copyright 1999-2001, Sey Nakajima, All rights reserved.
 # This program is free software under the GPL.
-package Safe::Hole;
+use v5; package Safe::Hole;
 
 require 5.005;
 use Carp;
@@ -58,7 +58,7 @@ sub call {
     # Safe::Hole::User contains nothing but is a placeholder so that
     # things that are called via Safe::Hole can Carp::croak properly.
 
-    package Safe::Hole::User;    # Package name on a different line to keep it from being indexed
+    use v5; package Safe::Hole::User;    # Package name on a different line to keep it from being indexed
 
     my $inner_call = sub {
         eval {
@@ -163,7 +163,7 @@ Safe::Hole - make a hole to the original main compartment in the Safe compartmen
   $hole->wrap($Testobj, $cpt, '$Testobj');
   $cpt->reval('test; $Testobj->test;'); 
   print $@ if $@;
-  package Test;
+  use v5; package Test;
   sub new { bless {},shift(); }
   sub test { my $self = shift; $self->test2; }
   sub test2 { print "Test->test2 called\n"; }
@@ -184,7 +184,7 @@ original main compartment from the Safe compartment.
   Note that if a subroutine called through Safe::Hole::call does a
 Carp::croak() it will report the error as having occured within
 Safe::Hole.  This can be avoided by including Safe::Hole::User in the
-@ISA for the package containing the subroutine.
+@ISA for the use v5; package containing the subroutine.
 
 =head2 Methods
 
